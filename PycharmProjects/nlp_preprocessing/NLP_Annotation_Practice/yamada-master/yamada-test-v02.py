from collections import defaultdict
import yamada
import networkx as nx

# 1）获得所有的联通图的，起点，终点，类别值
graph = [(13, 112, 31), (27, 123, 31), (37, 134, 31), (113, 13, 86), (18, 17, 86), (116, 18, 86), (126, 124, 86),
         (126, 27, 86), (137, 135, 86), (137, 37, 86), (143, 141, 86), (191, 144, 86), (151, 54, 86), (193, 152, 86),
         (155, 67, 86), (71, 70, 86), (166, 163, 86), (169, 167, 86), (176, 175, 86), (196, 176, 86), (113, 110, 99),
         (126, 121, 99), (137, 132, 99), (191, 44, 99), (60, 56, 99), (193, 60, 99), (10, 11, 121), (122, 25, 121),
         (34, 35, 121), (45, 47, 121), (46, 47, 121), (48, 49, 121), (57, 59, 121), (58, 59, 121), (61, 62, 121),
         (73, 74, 121), (75, 76, 121), (161, 162, 121), (169, 170, 121), (110, 10, 124), (121, 122, 124),
         (132, 34, 124), (44, 45, 124), (44, 46, 124), (44, 48, 124), (56, 57, 124), (56, 58, 124), (60, 61, 124),
         (72, 75, 124), (195, 161, 124), (188, 187, 127), (109, 108, 134), (110, 8, 134), (110, 6, 134), (113, 14, 134),
         (121, 119, 134), (121, 120, 134), (126, 125, 134), (132, 131, 134), (132, 32, 134), (132, 128, 134),
         (137, 136, 134), (143, 142, 134), (191, 51, 134), (191, 145, 134), (151, 150, 134), (151, 148, 134),
         (193, 64, 134), (193, 153, 134), (79, 157, 134), (195, 159, 134), (195, 194, 134), (195, 79, 134),
         (166, 164, 134), (166, 165, 134), (169, 168, 134), (181, 101, 134), (184, 104, 134), (109, 1, 135),
         (5, 4, 135), (110, 5, 135), (115, 114, 135), (17, 115, 135), (118, 117, 135), (121, 118, 135), (189, 127, 135),
         (189, 186, 135), (132, 189, 135), (139, 138, 135), (140, 138, 135), (41, 139, 135), (41, 140, 135),
         (143, 41, 135), (151, 192, 135), (155, 66, 135), (71, 185, 135), (73, 72, 135), (78, 77, 135), (195, 78, 135),
         (84, 83, 135), (166, 85, 135), (166, 84, 135), (89, 88, 135), (169, 89, 135), (173, 172, 135), (174, 173, 135),
         (175, 174, 135), (180, 179, 135), (181, 100, 135), (181, 180, 135), (183, 182, 135), (184, 183, 135),
         (8, 111, 138), (32, 129, 138), (79, 156, 138), (131, 130, 139), (150, 149, 139), (159, 158, 139)]

# graph_mst 是最小生成树的边，进过对比，去除了[(41, 140), (44, 46), (56, 58)]
graph_mst = [(13, 112, 31), (27, 123, 31), (37, 134, 31), (113, 13, 86), (18, 17, 86), (116, 18, 86), (126, 124, 86),
             (126, 27, 86), (137, 135, 86), (137, 37, 86), (143, 141, 86), (191, 144, 86), (151, 54, 86),
             (193, 152, 86), (155, 67, 86), (71, 70, 86), (166, 163, 86), (169, 167, 86), (176, 175, 86),
             (196, 176, 86), (113, 110, 99), (126, 121, 99), (137, 132, 99), (191, 44, 99), (60, 56, 99), (193, 60, 99),
             (10, 11, 121), (122, 25, 121), (34, 35, 121), (45, 47, 121), (46, 47, 121), (48, 49, 121), (57, 59, 121),
             (58, 59, 121), (61, 62, 121), (73, 74, 121), (75, 76, 121), (161, 162, 121), (169, 170, 121),
             (110, 10, 124), (121, 122, 124), (132, 34, 124), (44, 45, 124), (44, 48, 124), (56, 57, 124),
             (60, 61, 124), (72, 75, 124), (195, 161, 124), (188, 187, 127), (109, 108, 134), (110, 8, 134),
             (110, 6, 134), (113, 14, 134), (121, 119, 134), (121, 120, 134), (126, 125, 134), (132, 131, 134),
             (132, 32, 134), (132, 128, 134), (137, 136, 134), (143, 142, 134), (191, 51, 134), (191, 145, 134),
             (151, 150, 134), (151, 148, 134), (193, 64, 134), (193, 153, 134), (79, 157, 134), (195, 159, 134),
             (195, 194, 134), (195, 79, 134), (166, 164, 134), (166, 165, 134), (169, 168, 134), (181, 101, 134),
             (184, 104, 134), (109, 1, 135), (5, 4, 135), (110, 5, 135), (115, 114, 135), (17, 115, 135),
             (118, 117, 135), (121, 118, 135), (189, 127, 135), (189, 186, 135), (132, 189, 135), (139, 138, 135),
             (140, 138, 135), (41, 139, 135), (143, 41, 135), (151, 192, 135), (155, 66, 135), (71, 185, 135),
             (73, 72, 135), (78, 77, 135), (195, 78, 135), (84, 83, 135), (166, 85, 135), (166, 84, 135), (89, 88, 135),
             (169, 89, 135), (173, 172, 135), (174, 173, 135), (175, 174, 135), (180, 179, 135), (181, 100, 135),
             (181, 180, 135), (183, 182, 135), (184, 183, 135), (8, 111, 138), (32, 129, 138), (79, 156, 138),
             (131, 130, 139), (150, 149, 139), (159, 158, 139)]


#    【2】转换格式
# 1) 步骤一：改变第三个元素格式
def change_z(graph):
    new_graph = []
    for i, j, k in graph:
        new_graph.append((i, j, {'weight': k}))
    return new_graph


# 2） 步骤二：形成key：value格式，
def get_target_graph(graph):
    final_dict = defaultdict(dict)
    for start_point, end_point, weight in graph:
        final_dict[start_point].update({end_point: weight})
    return final_dict


# 3） 组合前两个函数
def graph_transform(graph):
    new_graph = change_z(graph)
    final_dict = get_target_graph(new_graph)
    return final_dict


new_graph = graph_transform(graph_mst)
print(new_graph)

#  【3】 把所有的weight设置为0
new_graph_1 = {13: {112: {'weight': 0}}, 27: {123: {'weight': 0}}, 37: {134: {'weight': 0}},
               113: {13: {'weight': 0}, 110: {'weight': 0}, 14: {'weight': 0}}, 18: {17: {'weight': 0}},
               116: {18: {'weight': 0}},
               126: {124: {'weight': 0}, 27: {'weight': 0}, 121: {'weight': 0}, 125: {'weight': 0}},
               137: {135: {'weight': 0}, 37: {'weight': 0}, 132: {'weight': 0}, 136: {'weight': 0}},
               143: {141: {'weight': 0}, 142: {'weight': 0}, 41: {'weight': 0}},
               191: {144: {'weight': 0}, 44: {'weight': 0}, 51: {'weight': 0}, 145: {'weight': 0}},
               151: {54: {'weight': 0}, 150: {'weight': 0}, 148: {'weight': 0}, 192: {'weight': 0}},
               193: {152: {'weight': 0}, 60: {'weight': 0}, 64: {'weight': 0}, 153: {'weight': 0}},
               155: {67: {'weight': 0}, 66: {'weight': 0}}, 71: {70: {'weight': 0}, 185: {'weight': 0}},
               166: {163: {'weight': 0}, 164: {'weight': 0}, 165: {'weight': 0}, 85: {'weight': 0},
                     84: {'weight': 0}},
               169: {167: {'weight': 0}, 170: {'weight': 0}, 168: {'weight': 0}, 89: {'weight': 0}},
               176: {175: {'weight': 0}}, 196: {176: {'weight': 0}}, 60: {56: {'weight': 0}, 61: {'weight': 0}},
               10: {11: {'weight': 0}}, 122: {25: {'weight': 0}}, 34: {35: {'weight': 0}},
               45: {47: {'weight': 0}}, 46: {47: {'weight': 0}}, 48: {49: {'weight': 0}},
               57: {59: {'weight': 0}}, 58: {59: {'weight': 0}}, 61: {62: {'weight': 0}},
               73: {74: {'weight': 0}, 72: {'weight': 0}}, 75: {76: {'weight': 0}}, 161: {162: {'weight': 0}},
               110: {10: {'weight': 0}, 8: {'weight': 0}, 6: {'weight': 0}, 5: {'weight': 0}},
               121: {122: {'weight': 0}, 119: {'weight': 0}, 120: {'weight': 0}, 118: {'weight': 0}},
               132: {34: {'weight': 0}, 131: {'weight': 0}, 32: {'weight': 0}, 128: {'weight': 0},
                     189: {'weight': 0}}, 44: {45: {'weight': 0}, 46: {'weight': 0}, 48: {'weight': 0}},
               56: {57: {'weight': 0}, 58: {'weight': 0}}, 72: {75: {'weight': 0}},
               195: {161: {'weight': 0}, 159: {'weight': 0}, 194: {'weight': 0}, 79: {'weight': 0},
                     78: {'weight': 0}}, 188: {187: {'weight': 0}}, 109: {108: {'weight': 0}, 1: {'weight': 0}},
               79: {157: {'weight': 0}, 156: {'weight': 0}},
               181: {101: {'weight': 0}, 100: {'weight': 0}, 180: {'weight': 0}},
               184: {104: {'weight': 0}, 183: {'weight': 0}}, 5: {4: {'weight': 0}}, 115: {114: {'weight': 0}},
               17: {115: {'weight': 0}}, 118: {117: {'weight': 0}},
               189: {127: {'weight': 0}, 186: {'weight': 0}}, 139: {138: {'weight': 0}},
               140: {138: {'weight': 0}}, 41: {139: {'weight': 0}, 140: {'weight': 0}}, 78: {77: {'weight': 0}},
               84: {83: {'weight': 0}}, 89: {88: {'weight': 0}}, 173: {172: {'weight': 0}},
               174: {173: {'weight': 0}}, 175: {174: {'weight': 0}}, 180: {179: {'weight': 0}},
               183: {182: {'weight': 0}}, 8: {111: {'weight': 0}}, 32: {129: {'weight': 0}},
               131: {130: {'weight': 0}}, 150: {149: {'weight': 0}}, 159: {158: {'weight': 0}}}

# 新的转换格式后的字典
new_graph_mst = {13: {112: {'weight': 0}}, 27: {123: {'weight': 0}}, 37: {134: {'weight': 0}},
                 113: {13: {'weight': 0}, 110: {'weight': 0}, 14: {'weight': 0}}, 18: {17: {'weight': 0}},
                 116: {18: {'weight': 0}},
                 126: {124: {'weight': 0}, 27: {'weight': 0}, 121: {'weight': 0}, 125: {'weight': 0}},
                 137: {135: {'weight': 0}, 37: {'weight': 0}, 132: {'weight': 0}, 136: {'weight': 0}},
                 143: {141: {'weight': 0}, 142: {'weight': 0}, 41: {'weight': 0}},
                 191: {144: {'weight': 0}, 44: {'weight': 0}, 51: {'weight': 0}, 145: {'weight': 0}},
                 151: {54: {'weight': 0}, 150: {'weight': 0}, 148: {'weight': 0}, 192: {'weight': 0}},
                 193: {152: {'weight': 0}, 60: {'weight': 0}, 64: {'weight': 0}, 153: {'weight': 0}},
                 155: {67: {'weight': 0}, 66: {'weight': 0}}, 71: {70: {'weight': 0}, 185: {'weight': 0}},
                 166: {163: {'weight': 0}, 164: {'weight': 0}, 165: {'weight': 0}, 85: {'weight': 0},
                       84: {'weight': 0}},
                 169: {167: {'weight': 0}, 170: {'weight': 0}, 168: {'weight': 0}, 89: {'weight': 0}},
                 176: {175: {'weight': 0}}, 196: {176: {'weight': 0}}, 60: {56: {'weight': 0}, 61: {'weight': 0}},
                 10: {11: {'weight': 0}}, 122: {25: {'weight': 0}}, 34: {35: {'weight': 0}},
                 45: {47: {'weight': 0}}, 46: {47: {'weight': 0}}, 48: {49: {'weight': 0}},
                 57: {59: {'weight': 0}}, 58: {59: {'weight': 0}}, 61: {62: {'weight': 0}},
                 73: {74: {'weight': 0}, 72: {'weight': 0}}, 75: {76: {'weight': 0}}, 161: {162: {'weight': 0}},
                 110: {10: {'weight': 0}, 8: {'weight': 0}, 6: {'weight': 0}, 5: {'weight': 0}},
                 121: {122: {'weight': 0}, 119: {'weight': 0}, 120: {'weight': 0}, 118: {'weight': 0}},
                 132: {34: {'weight': 0}, 131: {'weight': 0}, 32: {'weight': 0}, 128: {'weight': 0},
                       189: {'weight': 0}}, 44: {45: {'weight': 0}, 48: {'weight': 0}}, 56: {57: {'weight': 0}},
                 72: {75: {'weight': 0}},
                 195: {161: {'weight': 0}, 159: {'weight': 0}, 194: {'weight': 0}, 79: {'weight': 0},
                       78: {'weight': 0}}, 188: {187: {'weight': 0}},
                 109: {108: {'weight': 0}, 1: {'weight': 0}}, 79: {157: {'weight': 0}, 156: {'weight': 0}},
                 181: {101: {'weight': 0}, 100: {'weight': 0}, 180: {'weight': 0}},
                 184: {104: {'weight': 0}, 183: {'weight': 0}}, 5: {4: {'weight': 0}},
                 115: {114: {'weight': 0}}, 17: {115: {'weight': 0}}, 118: {117: {'weight': 0}},
                 189: {127: {'weight': 0}, 186: {'weight': 0}}, 139: {138: {'weight': 0}},
                 140: {138: {'weight': 0}}, 41: {139: {'weight': 0}}, 78: {77: {'weight': 0}},
                 84: {83: {'weight': 0}}, 89: {88: {'weight': 0}}, 173: {172: {'weight': 0}},
                 174: {173: {'weight': 0}}, 175: {174: {'weight': 0}}, 180: {179: {'weight': 0}},
                 183: {182: {'weight': 0}}, 8: {111: {'weight': 0}}, 32: {129: {'weight': 0}},
                 131: {130: {'weight': 0}}, 150: {149: {'weight': 0}}, 159: {158: {'weight': 0}}}



# 【4】 开始跑程序
graph = nx.Graph(new_graph_mst)

# retrieve all minimum spanning trees
graph_yamada = yamada.Yamada(graph)
all_msts = graph_yamada.spanning_trees()
for i in all_msts:
    print(i.edges())

print(len(all_msts))

# retrieve fixed number of minimum spanning trees
# graph_yamada = yamada.Yamada(graph, n_trees=3)
# msts = graph_yamada.spanning_trees()
# print(len(msts))
